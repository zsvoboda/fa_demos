# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.X
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_X import models

class DirectoryExport(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'export_name': 'str',
        'status': 'str',
        'context': 'FixedReference',
        'realm': 'FixedReferenceWithType',
        'server': 'FixedReferenceWithType',
        'destroyed': 'bool',
        'directory': 'FixedReferenceWithType',
        'name': 'str',
        'path': 'str',
        'policy': 'FixedReferenceWithType'
    }

    attribute_map = {
        'enabled': 'enabled',
        'export_name': 'export_name',
        'status': 'status',
        'context': 'context',
        'realm': 'realm',
        'server': 'server',
        'destroyed': 'destroyed',
        'directory': 'directory',
        'name': 'name',
        'path': 'path',
        'policy': 'policy'
    }

    required_args = {
    }

    def __init__(
        self,
        enabled=None,  # type: bool
        export_name=None,  # type: str
        status=None,  # type: str
        context=None,  # type: models.FixedReference
        realm=None,  # type: models.FixedReferenceWithType
        server=None,  # type: models.FixedReferenceWithType
        destroyed=None,  # type: bool
        directory=None,  # type: models.FixedReferenceWithType
        name=None,  # type: str
        path=None,  # type: str
        policy=None,  # type: models.FixedReferenceWithType
    ):
        """
        Keyword args:
            enabled (bool): Returns a value of `true` if the export policy that manages this export is enabled. 
            export_name (str): The export name for accessing this export.
            status (str): Explains why `enabled` is `false`, or whether there is a name conflict with another export. Valid values include `policy_disabled`, `export_disabled`, and `name_conflict`. 
            context (FixedReference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`. 
            realm (FixedReferenceWithType): Reference to the realm the object belongs to. When the value is not present or set to `null` it means the object lives outside of a realm. 
            server (FixedReferenceWithType): Reference to the server the object belongs to. When the value is not present or set to `null` it means the object lives outside of a server scope. 
            destroyed (bool): Returns a value of `true` if the managed directory of the export has been destroyed and is pending eradication. The export can be recovered by recovering the destroyed managed directory. 
            directory (FixedReferenceWithType): The managed directory of the export.
            name (str): Name of the export configuration object. Combines the export containment hierarchy (realm and server), the protocol (smb or nfs) and the user-visible `export_name`. 
            path (str): The path of the exported managed directory.
            policy (FixedReferenceWithType): The export policy that manages this export. An export can be managed by at most one export policy. 
        """
        if enabled is not None:
            self.enabled = enabled
        if export_name is not None:
            self.export_name = export_name
        if status is not None:
            self.status = status
        if context is not None:
            self.context = context
        if realm is not None:
            self.realm = realm
        if server is not None:
            self.server = server
        if destroyed is not None:
            self.destroyed = destroyed
        if directory is not None:
            self.directory = directory
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if policy is not None:
            self.policy = policy

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `DirectoryExport`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `DirectoryExport`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `DirectoryExport`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `DirectoryExport`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(DirectoryExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
