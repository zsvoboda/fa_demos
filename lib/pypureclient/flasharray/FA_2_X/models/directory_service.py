# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.X
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_X import models

class DirectoryService(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'realm': 'FixedReferenceWithType',
        'context': 'FixedReference',
        'base_dn': 'str',
        'bind_password': 'str',
        'bind_user': 'str',
        'enabled': 'bool',
        'services': 'list[str]',
        'uris': 'list[str]',
        'ca_certificate': 'str',
        'ca_certificate_ref': 'ReferenceWithType',
        'check_peer': 'bool',
        'management': 'DirectoryServiceManagement',
        'sources': 'list[ReferenceWithType]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'realm': 'realm',
        'context': 'context',
        'base_dn': 'base_dn',
        'bind_password': 'bind_password',
        'bind_user': 'bind_user',
        'enabled': 'enabled',
        'services': 'services',
        'uris': 'uris',
        'ca_certificate': 'ca_certificate',
        'ca_certificate_ref': 'ca_certificate_ref',
        'check_peer': 'check_peer',
        'management': 'management',
        'sources': 'sources'
    }

    required_args = {
    }

    def __init__(
        self,
        id=None,  # type: str
        name=None,  # type: str
        realm=None,  # type: models.FixedReferenceWithType
        context=None,  # type: models.FixedReference
        base_dn=None,  # type: str
        bind_password=None,  # type: str
        bind_user=None,  # type: str
        enabled=None,  # type: bool
        services=None,  # type: List[str]
        uris=None,  # type: List[str]
        ca_certificate=None,  # type: str
        ca_certificate_ref=None,  # type: models.ReferenceWithType
        check_peer=None,  # type: bool
        management=None,  # type: models.DirectoryServiceManagement
        sources=None,  # type: List[models.ReferenceWithType]
    ):
        """
        Keyword args:
            id (str): A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource. 
            name (str): A user-specified name. The name must be locally unique and can be changed. 
            realm (FixedReferenceWithType): Reference to the realm the object belongs to. When the value is not present or set to `null` it means the object lives outside of a realm. 
            context (FixedReference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`. 
            base_dn (str): Base of the Distinguished Name (DN) of the directory service groups. 
            bind_password (str): Masked password used to query the directory.
            bind_user (str): Username used to query the directory.
            enabled (bool): Whether or not the directory service is enabled.
            services (list[str]): Services for which the directory service configuration is used. 
            uris (list[str]): List of URIs for the configured directory servers.
            ca_certificate (str): The certificate of the Certificate Authority (CA) that signed the directory servers' certificate(s), which is used to validate the authenticity of the configured servers. Deprecated, please use ca_certificate_ref instead. Setting this field will result in ca_certificate_ref being updated to _legacy_ds_ca_certificate_<config_name>. 
            ca_certificate_ref (ReferenceWithType): Reference (ID, name, and resource type) of the Certificate Authority (CA) that signed the certificates of the directory servers, which is used to validate the authenticity of the configured servers. 
            check_peer (bool): Whether or not server authenticity is enforced when a certificate is provided. 
            management (DirectoryServiceManagement)
            sources (list[ReferenceWithType]): List of network interfaces used for egress. For directory services at the array level (not in any Realm), this list can be empty. If the list is empty, the system will look use VIFs with the \"ds\" service (or if none, the \"management\" service) for egress. 
        """
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if realm is not None:
            self.realm = realm
        if context is not None:
            self.context = context
        if base_dn is not None:
            self.base_dn = base_dn
        if bind_password is not None:
            self.bind_password = bind_password
        if bind_user is not None:
            self.bind_user = bind_user
        if enabled is not None:
            self.enabled = enabled
        if services is not None:
            self.services = services
        if uris is not None:
            self.uris = uris
        if ca_certificate is not None:
            self.ca_certificate = ca_certificate
        if ca_certificate_ref is not None:
            self.ca_certificate_ref = ca_certificate_ref
        if check_peer is not None:
            self.check_peer = check_peer
        if management is not None:
            self.management = management
        if sources is not None:
            self.sources = sources

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `DirectoryService`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `DirectoryService`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `DirectoryService`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `DirectoryService`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(DirectoryService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
