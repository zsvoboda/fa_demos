# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.X
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_X import models

class NetworkInterfacePerformanceFc(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'received_bytes_per_sec': 'int',
        'received_crc_errors': 'int',
        'received_crc_errors_per_sec': 'int',
        'received_frames_per_sec': 'int',
        'received_link_failures': 'int',
        'received_link_failures_per_sec': 'int',
        'received_loss_of_signal': 'int',
        'received_loss_of_signal_per_sec': 'int',
        'received_loss_of_sync': 'int',
        'received_loss_of_sync_per_sec': 'int',
        'sample_period': 'int',
        'total_errors': 'int',
        'total_errors_per_sec': 'int',
        'transmitted_bytes_per_sec': 'int',
        'transmitted_frames_per_sec': 'int',
        'transmitted_invalid_words': 'int',
        'transmitted_invalid_words_per_sec': 'int'
    }

    attribute_map = {
        'received_bytes_per_sec': 'received_bytes_per_sec',
        'received_crc_errors': 'received_crc_errors',
        'received_crc_errors_per_sec': 'received_crc_errors_per_sec',
        'received_frames_per_sec': 'received_frames_per_sec',
        'received_link_failures': 'received_link_failures',
        'received_link_failures_per_sec': 'received_link_failures_per_sec',
        'received_loss_of_signal': 'received_loss_of_signal',
        'received_loss_of_signal_per_sec': 'received_loss_of_signal_per_sec',
        'received_loss_of_sync': 'received_loss_of_sync',
        'received_loss_of_sync_per_sec': 'received_loss_of_sync_per_sec',
        'sample_period': 'sample_period',
        'total_errors': 'total_errors',
        'total_errors_per_sec': 'total_errors_per_sec',
        'transmitted_bytes_per_sec': 'transmitted_bytes_per_sec',
        'transmitted_frames_per_sec': 'transmitted_frames_per_sec',
        'transmitted_invalid_words': 'transmitted_invalid_words',
        'transmitted_invalid_words_per_sec': 'transmitted_invalid_words_per_sec'
    }

    required_args = {
    }

    def __init__(
        self,
        received_bytes_per_sec=None,  # type: int
        received_crc_errors=None,  # type: int
        received_crc_errors_per_sec=None,  # type: int
        received_frames_per_sec=None,  # type: int
        received_link_failures=None,  # type: int
        received_link_failures_per_sec=None,  # type: int
        received_loss_of_signal=None,  # type: int
        received_loss_of_signal_per_sec=None,  # type: int
        received_loss_of_sync=None,  # type: int
        received_loss_of_sync_per_sec=None,  # type: int
        sample_period=None,  # type: int
        total_errors=None,  # type: int
        total_errors_per_sec=None,  # type: int
        transmitted_bytes_per_sec=None,  # type: int
        transmitted_frames_per_sec=None,  # type: int
        transmitted_invalid_words=None,  # type: int
        transmitted_invalid_words_per_sec=None,  # type: int
    ):
        """
        Keyword args:
            received_bytes_per_sec (int): Bytes received per second. 
            received_crc_errors (int): Fibre Channel frame CRC errors received during the “sample_period”. 
            received_crc_errors_per_sec (int): This field has been deprecated. Please use the \"received_crc_errors\" instead. 
            received_frames_per_sec (int): Fibre Channel frames received per second. 
            received_link_failures (int): Loss of connectivity errors during the “sample_period”. 
            received_link_failures_per_sec (int): This field has been deprecated. Please use the \"received_link_failures\" instead. 
            received_loss_of_signal (int): Loss of signal errors on Fibre Channel port during the “sample_period”. 
            received_loss_of_signal_per_sec (int): This field has been deprecated. Please use the \"received_loss_of_signal\" instead. 
            received_loss_of_sync (int): Loss of sync errors on Fibre Channel port during the “sample_period”. 
            received_loss_of_sync_per_sec (int): This field has been deprecated. Please use the \"received_loss_of_sync\" instead. 
            sample_period (int): Sample duration for stats in milliseconds. 
            total_errors (int): The sum of all reception and transmission errors received during the “sample_period”. 
            total_errors_per_sec (int): This field has been deprecated. Please use the \"total_errors\" instead. 
            transmitted_bytes_per_sec (int): Bytes transmitted per second. 
            transmitted_frames_per_sec (int): Fibre Channel frames transmitted per second. 
            transmitted_invalid_words (int): Bit errors in transmission word during the “sample_period”. 
            transmitted_invalid_words_per_sec (int): This field has been deprecated. Please use the \"transmitted_invalid_words\" instead. 
        """
        if received_bytes_per_sec is not None:
            self.received_bytes_per_sec = received_bytes_per_sec
        if received_crc_errors is not None:
            self.received_crc_errors = received_crc_errors
        if received_crc_errors_per_sec is not None:
            self.received_crc_errors_per_sec = received_crc_errors_per_sec
        if received_frames_per_sec is not None:
            self.received_frames_per_sec = received_frames_per_sec
        if received_link_failures is not None:
            self.received_link_failures = received_link_failures
        if received_link_failures_per_sec is not None:
            self.received_link_failures_per_sec = received_link_failures_per_sec
        if received_loss_of_signal is not None:
            self.received_loss_of_signal = received_loss_of_signal
        if received_loss_of_signal_per_sec is not None:
            self.received_loss_of_signal_per_sec = received_loss_of_signal_per_sec
        if received_loss_of_sync is not None:
            self.received_loss_of_sync = received_loss_of_sync
        if received_loss_of_sync_per_sec is not None:
            self.received_loss_of_sync_per_sec = received_loss_of_sync_per_sec
        if sample_period is not None:
            self.sample_period = sample_period
        if total_errors is not None:
            self.total_errors = total_errors
        if total_errors_per_sec is not None:
            self.total_errors_per_sec = total_errors_per_sec
        if transmitted_bytes_per_sec is not None:
            self.transmitted_bytes_per_sec = transmitted_bytes_per_sec
        if transmitted_frames_per_sec is not None:
            self.transmitted_frames_per_sec = transmitted_frames_per_sec
        if transmitted_invalid_words is not None:
            self.transmitted_invalid_words = transmitted_invalid_words
        if transmitted_invalid_words_per_sec is not None:
            self.transmitted_invalid_words_per_sec = transmitted_invalid_words_per_sec

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `NetworkInterfacePerformanceFc`".format(key))
        if key == "received_bytes_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_bytes_per_sec`, must be a value greater than or equal to `0`")
        if key == "received_crc_errors" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_crc_errors`, must be a value greater than or equal to `0`")
        if key == "received_crc_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_crc_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "received_frames_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_frames_per_sec`, must be a value greater than or equal to `0`")
        if key == "received_link_failures" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_link_failures`, must be a value greater than or equal to `0`")
        if key == "received_link_failures_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_link_failures_per_sec`, must be a value greater than or equal to `0`")
        if key == "received_loss_of_signal" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_loss_of_signal`, must be a value greater than or equal to `0`")
        if key == "received_loss_of_signal_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_loss_of_signal_per_sec`, must be a value greater than or equal to `0`")
        if key == "received_loss_of_sync" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_loss_of_sync`, must be a value greater than or equal to `0`")
        if key == "received_loss_of_sync_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_loss_of_sync_per_sec`, must be a value greater than or equal to `0`")
        if key == "sample_period" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `sample_period`, must be a value greater than or equal to `0`")
        if key == "total_errors" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `total_errors`, must be a value greater than or equal to `0`")
        if key == "total_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `total_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "transmitted_bytes_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `transmitted_bytes_per_sec`, must be a value greater than or equal to `0`")
        if key == "transmitted_frames_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `transmitted_frames_per_sec`, must be a value greater than or equal to `0`")
        if key == "transmitted_invalid_words" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `transmitted_invalid_words`, must be a value greater than or equal to `0`")
        if key == "transmitted_invalid_words_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `transmitted_invalid_words_per_sec`, must be a value greater than or equal to `0`")
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `NetworkInterfacePerformanceFc`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `NetworkInterfacePerformanceFc`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `NetworkInterfacePerformanceFc`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(NetworkInterfacePerformanceFc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInterfacePerformanceFc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
