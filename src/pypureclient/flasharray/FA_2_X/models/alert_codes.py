# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.X
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_X import models

class AlertCodes(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'FixedReferenceWithType',
        'code': 'int',
        'default_reminder_frequency': 'str',
        'description': 'str',
        'minimum_severity': 'str',
        'reminder_frequency': 'str',
        'snooze_period_expires': 'str',
        'snooze_period_started': 'str'
    }

    attribute_map = {
        'context': 'context',
        'code': 'code',
        'default_reminder_frequency': 'default_reminder_frequency',
        'description': 'description',
        'minimum_severity': 'minimum_severity',
        'reminder_frequency': 'reminder_frequency',
        'snooze_period_expires': 'snooze_period_expires',
        'snooze_period_started': 'snooze_period_started'
    }

    required_args = {
    }

    def __init__(
        self,
        context=None,  # type: models.FixedReferenceWithType
        code=None,  # type: int
        default_reminder_frequency=None,  # type: str
        description=None,  # type: str
        minimum_severity=None,  # type: str
        reminder_frequency=None,  # type: str
        snooze_period_expires=None,  # type: str
        snooze_period_started=None,  # type: str
    ):
        """
        Keyword args:
            context (FixedReferenceWithType): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet.  Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`. 
            code (int): The unique identification code of the alert type.
            default_reminder_frequency (str): The default frequency with which the reminder emails about an open alert are sent. If the value is null then the alert code does not send reminder email notifications. Value is in milliseconds. 
            description (str): A short description of the alert.
            minimum_severity (str): The minimum severity level of the alert. Valid values include `info`, `warning`, and `critical`. 
            reminder_frequency (str): The configurable frequency with which the reminder emails about an open alert are sent. Value is in milliseconds. Use \"\" to clear. 
            snooze_period_expires (str): The snooze period end time, which is when the system will start sending reminder emails for open alerts with the specified alert code again. Value is measured in milliseconds since the UNIX epoch. 
            snooze_period_started (str): The snooze period start time, which is the starting point for when all reminder emails for open alerts with the specified code are suppressed for a set period of time. Value is measured in milliseconds since the UNIX epoch. 
        """
        if context is not None:
            self.context = context
        if code is not None:
            self.code = code
        if default_reminder_frequency is not None:
            self.default_reminder_frequency = default_reminder_frequency
        if description is not None:
            self.description = description
        if minimum_severity is not None:
            self.minimum_severity = minimum_severity
        if reminder_frequency is not None:
            self.reminder_frequency = reminder_frequency
        if snooze_period_expires is not None:
            self.snooze_period_expires = snooze_period_expires
        if snooze_period_started is not None:
            self.snooze_period_started = snooze_period_started

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `AlertCodes`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `AlertCodes`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `AlertCodes`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `AlertCodes`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(AlertCodes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertCodes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
